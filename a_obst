import numpy as np
def OBST(p, q, n1):
    n = n1 - 1
    r = [[0 for y in range(n1)]
         for x in range(n1)]
    w = [[0 for y in range(n1)]
         for x in range(n1)]
    c = [[0 for y in range(n1)]
         for x in range(n1)]
    print("ws:", w, "\n")
    print("cs:", c, "\n")
    print("rs:", r, "\n")
    for i in range(n):  # i =0,1,2,3     00,11,22,33,01,12,23,34
        w[i][i] = q[i]
        r[i][i] = 0
        c[i][i] = 0
        w[i][i + 1] = q[i] + q[i + 1] + p[i + 1]
        r[i][i + 1] = i + 1
        c[i][i + 1] = q[i] + q[i + 1] + p[i + 1]

    w[n][n] = q[n]  # 44
    r[n][n] = 0
    c[n][n] = 0

    for m in range(2, n1, 1):  # n1=5; trees of size m=2,3,4
        for i in range(n1 - m):  # m=4; n1-m=5-4=1, i=0
            j = i + m  # j = 4
            w[i][j] = w[i][j - 1] + q[j] + p[j]  # w04
            k = find(c, r, i, j)
            c[i][j] = w[i][j] + c[i][k - 1] + c[k][j]
            r[i][j] = k

    print("ws:", w, "\n")
    print("cs:", c, "\n")
    print("rs:", r, "\n")


def find(c, r, i, j):  
    l = -1
    min = 10000
    for m in range(i + 1, j + 1, 1):  
        if (c[i][m - 1] + c[m][j] < min):  
            min = c[i][m - 1] + c[m][j]
            l = m

    return l

p=[-1,3,3,1,1]
q=[2,3,1,1,1]
print(type(p))
print(type(q))
print(p[0:5])
print(q[0:5])
OBST(p,q,5)
