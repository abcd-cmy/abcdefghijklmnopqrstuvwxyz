def computePiArray(pat, m, pi):
    len = 0  
    pi[0]  
    i = 1
 
    while i < m:
        if pat[i] == pat[len]:
            len += 1
            pi[i] = len
            i += 1
        else:
            if len != 0:
                len = pi[len - 1]
            else:
                pi[i] = 0
                i += 1

txt = input("Enter the String:")
pat = input("Enter the pattern to be checked : ")
KMPSearch(pat, txt)
d = 10       
def search(pattern, text, q):
    m = len(pattern)
    n = len(text)
    p = 0     
    t = 0     
    h = 1
    i = 0
    j = 0
    for i in range(m-1):
        h = (h*d) % q
    for i in range(m):
        p = (d*p + ord(pattern[i])) % q
        t = (d*t + ord(text[i])) % q
    for i in range(n-m+1):
        if p == t:
            for j in range(m):
                if text[i+j] != pattern[j]:
                    break

            j += 1
            if j == m:
                print("Pattern is found at position: " + str(i+1))
        if i < n-m:
            t = (d*(t-ord(text[i])*h) + ord(text[i+m])) % q
text = input("Enter the String : ")
pattern = input("Enter the pattern to be checked : ")
q = 13      
search(pattern, text, q)
